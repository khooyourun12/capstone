from pynq import Overlay, allocate
import os
import numpy as np

INPUT_NODES = 48
OUTPUT_NODES = 2

cwd = os.getcwd()
bitstream_path = os.path.join(cwd, "mlp_unroll_pipeline.bit")

# ol.free()
ol = Overlay(bitstream_path)

ol.ip_dict.keys()

dma = ol.dma
dma_send = dma.sendchannel
dma_receive = dma.recvchannel

dma.sendchannel.stop()
dma.recvchannel.stop()
dma.sendchannel.start()
dma.recvchannel.start()

input_buffer = allocate(shape=(INPUT_NODES,), dtype=np.float32)
output_buffer = allocate(shape=(OUTPUT_NODES,), dtype=np.float32)

mlp = ol.mlp_0

CONTROL_REGISTER = 0x0
mlp.write(CONTROL_REGISTER, 0x81)


def get_fpga_output(input_data):
    try:
        if len(input_data) != INPUT_NODES:
            print("Input data length doesn't match neural network input")
            return

        for i in range(len(input_data)):
            input_buffer[i] = input_data[i]
        dma_send.transfer(input_buffer)
        dma_send.wait()
        dma_receive.transfer(output_buffer)
        dma_receive.wait()
        # --------------- TIMING ---------------- #
        action = np.argmax(output_buffer)

    except Exception as e:
        print("FPGA error")
        print(e)
        return
    return action
